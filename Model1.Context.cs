//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cash_prg
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CashDbEntities : DbContext
    {
        public CashDbEntities()
            : base("name=CashDbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Acc_a> Acc_a { get; set; }
        public virtual DbSet<Acc_b> Acc_b { get; set; }
        public virtual DbSet<Acc_c> Acc_c { get; set; }
        public virtual DbSet<Acc_d> Acc_d { get; set; }
        public virtual DbSet<Calender_tbl> Calender_tbl { get; set; }
        public virtual DbSet<City_tbl> City_tbl { get; set; }
        public virtual DbSet<Company_tbl> Company_tbl { get; set; }
        public virtual DbSet<Country_tbl> Country_tbl { get; set; }
        public virtual DbSet<Currency_tbl> Currency_tbl { get; set; }
        public virtual DbSet<Customer_tbl> Customer_tbl { get; set; }
        public virtual DbSet<Delivery_Purchase_order> Delivery_Purchase_order { get; set; }
        public virtual DbSet<Delivery_Sales_Estimate> Delivery_Sales_Estimate { get; set; }
        public virtual DbSet<Descount_type_tbl> Descount_type_tbl { get; set; }
        public virtual DbSet<Emp_tbl> Emp_tbl { get; set; }
        public virtual DbSet<Emp_work_tbl> Emp_work_tbl { get; set; }
        public virtual DbSet<Installment_tbl> Installment_tbl { get; set; }
        public virtual DbSet<Item_content_tbl> Item_content_tbl { get; set; }
        public virtual DbSet<Item_kind_tbl> Item_kind_tbl { get; set; }
        public virtual DbSet<Items_tbl> Items_tbl { get; set; }
        public virtual DbSet<Ownership_kind_tbl> Ownership_kind_tbl { get; set; }
        public virtual DbSet<Ownership_person_tbl> Ownership_person_tbl { get; set; }
        public virtual DbSet<Payment_method_tbl> Payment_method_tbl { get; set; }
        public virtual DbSet<Project_tbl> Project_tbl { get; set; }
        public virtual DbSet<Purchase_invoice_tbl> Purchase_invoice_tbl { get; set; }
        public virtual DbSet<Purchase_order_items_tbl> Purchase_order_items_tbl { get; set; }
        public virtual DbSet<Purchase_order_tbl> Purchase_order_tbl { get; set; }
        public virtual DbSet<Purchase_payment_cheque_tbl> Purchase_payment_cheque_tbl { get; set; }
        public virtual DbSet<Sales_Estimate_items_tbl> Sales_Estimate_items_tbl { get; set; }
        public virtual DbSet<Sales_Estimate_tbl> Sales_Estimate_tbl { get; set; }
        public virtual DbSet<Sales_invoice_tbl> Sales_invoice_tbl { get; set; }
        public virtual DbSet<Sales_person_tbl> Sales_person_tbl { get; set; }
        public virtual DbSet<Sales_Receipt_payment_tbl> Sales_Receipt_payment_tbl { get; set; }
        public virtual DbSet<Sarvice_tbl> Sarvice_tbl { get; set; }
        public virtual DbSet<Status_tbl> Status_tbl { get; set; }
        public virtual DbSet<Store_tbl> Store_tbl { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Tax_type_tbl> Tax_type_tbl { get; set; }
        public virtual DbSet<Town_tbl> Town_tbl { get; set; }
        public virtual DbSet<Unit_tbl> Unit_tbl { get; set; }
        public virtual DbSet<Vendors_tbl> Vendors_tbl { get; set; }
        public virtual DbSet<Purchase_payment_tbl> Purchase_payment_tbl { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    }
}
